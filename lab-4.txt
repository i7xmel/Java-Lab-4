abstract class Robber {
    // Abstract method to be implemented by subclasses
    abstract int RowHouses(int[] houseMoney);
    abstract int RoundHouses(int[] houseMoney);
    abstract int SquareHouse(int[] houseMoney);
    abstract int MultiHouseBuilding(int[] moneyType1, int[] moneyType2, int[] moneyType3, int[] moneyType4);

    // Default method in the abstract class
    void MachineLearning() {
        System.out.println("I love MachineLearning.");
    }

    // Function in the abstract class
    void RobbingClass() {
        System.out.println("MScAI&ML");
    }
}

// Subclass that inherits from Robber
class JAVAProfessionalRobber extends Robber {
    // Implementing abstract methods
    @Override
    int RowHouses(int[] houseMoney) {
        int n = houseMoney.length;
        if (n == 0) return 0;
        if (n == 1) return houseMoney[0];

        // Dynamic Programming approach to find maximum robbed amount without adjacent houses
        int[] dp = new int[n];
        dp[0] = houseMoney[0];
        dp[1] = Math.max(houseMoney[0], houseMoney[1]);

        for (int i = 2; i < n; i++) {
            dp[i] = Math.max(dp[i - 1], dp[i - 2] + houseMoney[i]);
        }

        return dp[n - 1];
    }